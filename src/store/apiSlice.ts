import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "@store/store";
import { api } from "@apis/index";

interface API_LIST {
  activity?: string;
  activity_posts?: string;
  activity_products?: string;
  activity_post_products?: string;
  activity_create_post?: string;
  activity_replace_post?: string;
  activity_duplicate_post?: string;
  is_member?: string;
  member_actions?: string;
  post?: string;
  products?: string;
  bind_member?: string;
  activity_create_product?: string;
  products_nicknames?: string;
  product_variants_nicknames?: string;
  social_accounts?: string;
  activity_post_discount?: string;
  member?: string;
  post_actions?: string;
  categories?: string;
  urls?: string;
  setting_facebook_login?: string;
  setting_scheduler?: string;
  product?: string;
}

export interface State {
  apis: API_LIST | null;
  status: "idle" | "loading" | "failed";
}

const initialState: State = {
  apis: null,
  status: "idle",
};

const getApiList = (url: string) => {
  return api.get(url, { baseURL: "" });
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(setUserInfo())`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getApiAsync = createAsyncThunk(
  "api/fetchApis",
  async (url: string) => {
    const apis: API_LIST = await new Promise((resolve) => {
      getApiList(url).then((res: any) => {
        const { success } = res;
        if (success) {
          resolve(res.data);
        }
      });
    });
    return apis;
  }
);

export const apiSlice = createSlice({
  name: "apis",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getApiAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getApiAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.apis = action.payload;
      })
      .addCase(getApiAsync.rejected, (state) => {
        state.status = "failed";
      });
  },
});

// export const { } = apiSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file.
export const selectApis = (state: RootState) => state.apis.apis;

export default apiSlice.reducer;
